# Node.js Backend Developer Interview Guide

## What is Backend?

The backend ensures the application's scalability, performance, and security. It acts as the backbone of any web application, supporting user interactions and providing dynamic content.

## What is Node.js?

* Node.js is a JavaScript runtime environment that executes JavaScript code on the server side, enabling back-end development.
* Built on Chrome's V8 JavaScript engine.

## Difference Between Node.js and JavaScript

* **JavaScript**: A programming language primarily used in browsers to build interactive front-end applications.
* **Node.js**: A runtime environment that allows JavaScript to run on the server side.

## Key Features of Node.js

* One language for both frontend and backend.
* Asynchronous and Non-Blocking I/O operations.
* Ideal for I/O-heavy applications like APIs, real-time apps, and data streaming.
* Fast Execution with Chrome V8 Engine using JIT (Just-In-Time) compilation.
* Rich package ecosystem via npm.
* Microservices architecture support.
* Cross-platform compatibility.
* Large community support.

## Why MongoDB is Popular?

* MongoDB is a NoSQL database known for horizontal scaling and flexible document schema.

## Require vs Import

**require()** (CommonJS):

* Synchronous
* Specific to Node.js
* Can be used conditionally

**import/export** (ES6):

* Asynchronous
* Works in both Node.js and browsers
* Must be at the top of the file

## Structured vs Unstructured Data

**Structured**: Organized in a predefined schema (tables, rows, columns).
**Unstructured**: No fixed schema (JSON, images, videos, etc.).

## Horizontal vs Vertical Scaling

* **Vertical Scaling**: Increase CPU, memory of a single server.
* **Horizontal Scaling**: Add more servers/nodes to distribute the load.

## What is an API?

An API (Application Programming Interface) allows different software components to communicate with each other.

## Why REST APIs are Popular

* Use standard HTTP methods (GET, POST, PUT, DELETE).
* Stateless architecture.
* Easy to scale.
* JSON-based, language agnostic.

## REST API Endpoint Components

* Base URL
* Resource Path
* HTTP Method
* Parameters (query/path)

## What is GraphQL?

* Single endpoint for all queries/mutations.
* Retrieve complex, nested data in a single request.

## What is npm in Node.js?

* Default package manager for Node.js.
* Install, manage, share JavaScript packages.

## Asynchronous & Event-Driven Architecture

* Handles multiple requests concurrently.
* Event loop manages async tasks.

## Node.js Modules

* Core Modules (fs, http)
* Custom Modules
* Third-party Modules (via npm)

## Event Loop

Manages async operations without blocking main thread:

* Timers
* Pending callbacks
* I/O Polling
* Check phase
* Close callbacks

## Streams in Node.js

* Streams are used to process large data chunks piece-by-piece (streaming), instead of loading all into memory.
* Types:

  * Readable
  * Writable
  * Duplex
  * Transform

## Buffer

* Handles binary data, useful for file system or TCP streams.

## Callback Hell

* Nesting of multiple callbacks causing unreadable code.
* Mitigated using Promises or async/await.

## Error Handling

* try-catch for sync
* .catch() for Promises
* Middleware in Express
* Handle error events in EventEmitters

## Express Middleware

* Application-level
* Router-level
* Error-handling
* Built-in (json, urlencoded)
* Third-party (cors, morgan)

## File System (fs) Module

* Read/write files asynchronously and synchronously.

## HTTP/HTTPS Modules

* Build web servers.

## How Node.js Handles Concurrency

* Single-threaded with event loop.
* Offloads I/O operations to the kernel.

## Worker Threads

* Used for CPU-intensive tasks to avoid blocking the event loop.

## fork() vs spawn()

* **fork()**: Spawns a new Node.js process.
* **spawn()**: Launches a new process for shell commands.

## Node.js Security Best Practices

* Validate/sanitize input.
* Use HTTPS.
* Avoid deprecated npm packages.
* Use environment variables.
* Implement authentication/authorization.

## Async Code Handling

* Callbacks
* Promises
* Async/await

## Promises

Represents the eventual completion (or failure) of an async operation.

## Async/Await

* async: Returns a Promise.
* await: Waits for a Promise to resolve.

## Callbacks

* Used for handling async operations like I/O or API calls.

## fs.readFile vs readFileSync

**fs.readFile**:

* Asynchronous
* Non-blocking
* Uses callback

**fs.readFileSync**:

* Synchronous
* Blocking
* Returns result directly

## Request vs Response in HTTP

**Request**:

* Sent by client to access data.
* Includes method, headers, body, etc.

**Response**:

* Sent by server.
* Contains status code, body, headers.

## Load Balancing in Node.js

* Distribute traffic among multiple Node.js instances using:

  * Cluster module
  * Nginx/HAProxy

---

# üîç Advanced Node.js Interview Questions (4+ Years Experience)

## What are Node.js clusters?

Node.js runs in a single thread. To take advantage of multi-core systems, the **cluster** module allows spawning child processes (workers) that share the same server port.

```js
const cluster = require('cluster');
const http = require('http');
const os = require('os');

if (cluster.isMaster) {
  const cpuCount = os.cpus().length;
  for (let i = 0; i < cpuCount; i++) {
    cluster.fork();
  }
} else {
  http.createServer((req, res) => res.end('Worker Response')).listen(3000);
}
```

## What is the role of libuv in Node.js?

* **libuv** is a C library that provides Node.js with an abstraction over asynchronous I/O.
* Manages the thread pool, event loop, and I/O operations like filesystem, DNS, etc.

## What is the difference between process.nextTick(), setImmediate(), and setTimeout()?

| Method             | Execution Time                   |
| ------------------ | -------------------------------- |
| process.nextTick() | Executes before any I/O or timer |
| setImmediate()     | Executes after I/O events        |
| setTimeout()       | Executes after defined delay     |

## What is middleware chaining in Express?

You can use multiple middleware functions in sequence for a route:

```js
app.get('/user', middleware1, middleware2, (req, res) => {
  res.send('Final Handler');
});
```

Each middleware must call `next()` to continue the chain.

## How do you manage environment variables in Node.js?

Use the `dotenv` package to load variables from a `.env` file:

```js
require('dotenv').config();
console.log(process.env.PORT);
```

## What are memory leaks in Node.js and how to prevent them?

Memory leaks occur when objects are not garbage collected. Common causes:

* Global variables
* Forgotten timers/listeners
* Improper closures

Tools: Chrome DevTools, heap snapshots, `node --inspect`.

## How to implement caching in Node.js?

* In-memory: `node-cache`, `memory-cache`
* External: Redis, Memcached

```js
const NodeCache = require('node-cache');
const cache = new NodeCache({ stdTTL: 100 });
```

## What is the difference between synchronous and asynchronous code?

* **Synchronous**: Blocks execution until current task finishes.
* **Asynchronous**: Executes independently and calls back when done.

## What are EventEmitters in Node.js?

EventEmitters handle custom events:

```js
const EventEmitter = require('events');
const emitter = new EventEmitter();

emitter.on('start', () => console.log('Started'));
emitter.emit('start');
```

## How do you secure a Node.js application?

* Helmet to set secure HTTP headers
* Rate limiting
* Data validation (Joi, express-validator)
* CORS policy
* HTTPS
* Environment variables with dotenv

## What is CSR vs SSR?

* **CSR (Client-Side Rendering)**: HTML generated in browser using JS.
* **SSR (Server-Side Rendering)**: HTML generated on server (e.g., Next.js).

## What is process.env?

It provides access to environment variables in Node.js apps.

```js
console.log(process.env.NODE_ENV);
```

## What are common memory management issues?

* Leaks due to closures or event listeners
* Not releasing database connections
* Large in-memory caching

## How to handle large file uploads in Node.js?

* Use `stream` API
* Use packages like `multer`, `busboy`, `formidable`

## What is JWT and how is it used in authentication?

* JSON Web Tokens securely transmit information.
* Used in stateless authentication between client and server.

```js
const token = jwt.sign({ userId: 1 }, 'secret', { expiresIn: '1h' });
```

---

Let me know if you'd like to split these into beginner/intermediate/advanced sections or export as `.md` or `.pdf`.

## How does clustering work in Node.js?
Clustering allows Node to utilize multiple CPU cores by creating child processes (workers) that share the same server port.
